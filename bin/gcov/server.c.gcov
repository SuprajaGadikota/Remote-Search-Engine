        -:    0:Source:../src/server.c
        -:    0:Graph:server.gcno
        -:    0:Data:server.gcda
        -:    0:Runs:2
        -:    1:/***************************************************************************************************
        -:    2: *
        -:    3: *                                       HEADER FILES
        -:    4: *
        -:    5: ****************************************************************************************************/
        -:    6:#include <utility.h>
        -:    7:#include <signal.h>
        -:    8:/*****************************************************************************************************
        -:    9: *
        -:   10: *       FUNCTION NAME : main()
        -:   11: *       DESCRIPTION : it is server side main function.
        -:   12: *       RETURNS : SUCCESS OR FAILURE
        -:   13: *
        -:   14: ****************************************************************************************************/
        -:   15:int connfd = -1;
        -:   16:int sd = -1;
        -:   17:
function signalHandler called 1 returned 0% blocks executed 100%
        1:   18:void signalHandler(int sig)
        -:   19:{
        1:   20:    printf("Recieved Signal %d\n", sig);
call    0 returned 1
        1:   21:    close(sd);
call    0 returned 1
        1:   22:    close(connfd);
call    0 returned 1
        1:   23:    exit(sig);
        -:   24:}
function exitfunc called 0 returned 0% blocks executed 0%
    #####:   25:void exitfunc()
        -:   26:{
    #####:   27:    close(sd);
call    0 never executed
    #####:   28:}
        -:   29:
function main called 1 returned 0% blocks executed 67%
        1:   30:int main()
        -:   31:{
        1:   32:    signal(SIGINT, signalHandler);
call    0 returned 1
        -:   33:    struct sockaddr_in server, client;
        1:   34:    int bindret = -1;
        1:   35:    int lisret = -1;
        1:   36:    int ret = -1;
        -:   37:    socklen_t len;
        -:   38:    pid_t childpid;
        -:   39:    char buf[MAX];
        -:   40:    char addr[MAX];
        -:   41:    char choice_buf[2];
        -:   42:    char rec_path[MAX];
        -:   43:    char user_path[MAX];
        -:   44:    int num;
        -:   45:
        1:   46:    sd = socket(AF_INET, SOCK_STREAM, 0);
call    0 returned 1
        -:   47:
        1:   48:    if (-1 == sd)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   49:    {
    #####:   50:        perror("\nSERVER: SOCKET ERROR!!!\n");
call    0 never executed
    #####:   51:        return FAILURE;
        -:   52:    }
        -:   53:
        1:   54:    memset(&server, 0, sizeof(server));
        1:   55:    server.sin_family = AF_INET;
        1:   56:    server.sin_port = htons(MYPORT);
        1:   57:    server.sin_addr.s_addr = htonl(INADDR_ANY);
        -:   58:
        1:   59:    bindret = bind(sd, (struct sockaddr *)&server, sizeof(server));
call    0 returned 1
        -:   60:
        1:   61:    if (-1 == bindret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   62:    {
    #####:   63:        perror("\nSERVER: BINDING ERROR!!!\n");
call    0 never executed
    #####:   64:        return FAILURE;
        -:   65:    }
        -:   66:
        1:   67:    lisret = listen(sd, 5);
call    0 returned 1
        1:   68:    if (-1 == lisret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   69:    {
    #####:   70:        perror("\nSERVER: LISTEN ERROR!!! \n");
call    0 never executed
    #####:   71:        return FAILURE;
        -:   72:    }
        -:   73:
        -:   74:    for (;;)
        -:   75:    {
        -:   76:        // system("clear");
        2:   77:        printf("\n ....WAITING FOR CLIENT....\n");
call    0 returned 2
        2:   78:        memset(&client, 0, sizeof(client));
        2:   79:        len = sizeof(client);
        -:   80:
        2:   81:        connfd = accept(sd, (struct sockaddr *)&client, &len);
call    0 returned 1
        1:   82:        if (-1 == connfd)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   83:        {
    #####:   84:            perror("\nSERVER: CONNECTION ERROR!!!\n");
call    0 never executed
    #####:   85:            return FAILURE;
        -:   86:        }
        1:   87:        if ((childpid = fork()) == 0)
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:   88:        {
        1:   89:            printf("\n CONNECTION FROM : %s\n", inet_ntop(AF_INET, &client.sin_addr, addr, sizeof(addr)));
call    0 returned 1
call    1 returned 1
        1:   90:            recv(connfd, rec_path, sizeof(rec_path), 0);
call    0 returned 1
        1:   91:            DIR *dir = opendir(rec_path);
call    0 returned 1
        1:   92:            if (dir)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   93:            {
        1:   94:                printf("The received path is :%s\n", rec_path);
call    0 returned 1
        1:   95:                strcpy(user_path, rec_path);
        -:   96:            }
        -:   97:            else
        -:   98:            {
        -:   99:                // strncpy(choice_buf, rec_path, 2);
    #####:  100:                perror("SERVER : Error Opening Directory\n");
call    0 never executed
    #####:  101:                close(connfd);
call    0 never executed
    #####:  102:                exit(SUCCESS);
call    0 never executed
        -:  103:            }
        -:  104:            for (;;)
        2:  105:            {
        -:  106:                // if(choice_buf[0] == '\0'){
        3:  107:                ret = recv(connfd, choice_buf, sizeof(choice_buf), 0);
call    0 returned 3
        3:  108:                if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  109:                {
    #####:  110:                    perror("\nSERVER: FAILURE IN READING!!!\n");
call    0 never executed
    #####:  111:                    return FAILURE;
        -:  112:                }
        -:  113:                //}
        3:  114:                printf("Recv option: %s\n", choice_buf);
call    0 returned 3
        3:  115:                char choice = choice_buf[0];
        -:  116:                char filenum[5], file_contents[5000];
        3:  117:                switch (choice)
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 0
        -:  118:                {
        1:  119:                case '1':
        1:  120:                    memset(buf, 0, sizeof(buf));
        1:  121:                    ret = read_data(connfd, buf);
call    0 returned 1
        1:  122:                    if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  123:                    {
    #####:  124:                        perror("\nSERVER: FAILURE IN READING SEARCH STRING!!!\n");
call    0 never executed
        -:  125:                        // return FAILURE;
        -:  126:                    }
        -:  127:
        1:  128:                    system("rm files.txt");
call    0 returned 1
        1:  129:                    system("touch files.txt");
call    0 returned 1
        1:  130:                    int fd = open("files.txt", O_RDWR, 0644);
call    0 returned 1
        1:  131:                    printf("Search string is %s\n", buf);
call    0 returned 1
        1:  132:                    printf("The received path is :%s\n", user_path);
call    0 returned 1
        1:  133:                    int ret = list_files_recursively(fd, user_path, buf);
call    0 returned 1
       1*:  134:                    if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  135:                    {
    #####:  136:                        perror("\nSERVER: FAILURE IN GETTING FILES!!!\n");
call    0 never executed
    #####:  137:                        continue;
        -:  138:                        // return FAILURE;
        -:  139:                    }
        -:  140:
        1:  141:                    strcpy(buf, read_contents(buf, "files.txt"));
call    0 returned 1
       1*:  142:                    if (strlen(buf) < 5)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  143:                    {
    #####:  144:                        send(connfd, "-1", strlen("-1"), 0);
call    0 never executed
    #####:  145:                        bzero(choice_buf, sizeof(choice_buf));
    #####:  146:                        continue;
        -:  147:                    }
        1:  148:                    ret = send(connfd, buf, strlen(buf), 0);
call    0 returned 1
        1:  149:                    if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  150:                    {
    #####:  151:                        perror("\nSERVER: FAILURE IN WRITING FILE NAMES!!!\n");
call    0 never executed
    #####:  152:                        bzero(choice_buf, sizeof(choice_buf));
        -:  153:                        // return FAILURE;
        -:  154:                    }
        1:  155:                    ret = recv(connfd, &filenum, sizeof(filenum), 0);
call    0 returned 1
       1*:  156:                    if (filenum[0] == '0')
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  157:                    {
    #####:  158:                        printf("Denied reading file content from client\n");
call    0 never executed
    #####:  159:                        bzero(choice_buf, sizeof(choice_buf));
    #####:  160:                        continue;
        -:  161:                    }
       1*:  162:                    if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  163:                    {
    #####:  164:                        perror("\nSERVER: FAILURE IN READING FILE NUMBER!!!\n");
call    0 never executed
    #####:  165:                        bzero(choice_buf, sizeof(choice_buf));
    #####:  166:                        continue;
        -:  167:                        // return FAILURE;
        -:  168:                    }
        1:  169:                    printf("\nRecieved file number: %s\n", filenum);
call    0 returned 1
        1:  170:                    num = atoi(filenum);
        1:  171:                    strcpy(file_contents, read_file_contents(file_contents, num - 1));
call    0 returned 1
        1:  172:                    ret = send(connfd, file_contents, strlen(file_contents), 0);
call    0 returned 1
        1:  173:                    if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  174:                    {
    #####:  175:                        perror("\nSERVER: FAILURE IN WRITING FILE CONTENTS!!!\n");
call    0 never executed
        -:  176:                        // return FAILURE;
        -:  177:                    }
        1:  178:                    fflush(NULL);
call    0 returned 1
        1:  179:                    bzero(buf, sizeof(buf));
        1:  180:                    bzero(filenum, sizeof(filenum));
        1:  181:                    bzero(file_contents, sizeof(file_contents));
        1:  182:                    bzero(choice_buf, sizeof(choice_buf));
        1:  183:                    break;
        -:  184:
        1:  185:                case '2':
        1:  186:                    ret = read_data(connfd, buf);
call    0 returned 1
        1:  187:                    if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  188:                    {
    #####:  189:                        perror("\nSERVER: FAILURE IN READING FILE NAME(PATH)!!!\n");
call    0 never executed
        -:  190:                        // return FAILURE;
        -:  191:                    }
        -:  192:                    // buf[strlen(buf)]='\0';
        1:  193:                    printf("File name is %s", buf);
call    0 returned 1
        1:  194:                    FILE *fpt = fopen(buf, "r");
call    0 returned 1
        1:  195:                    if (fpt)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  196:                    {
        1:  197:                        fclose(fpt);
call    0 returned 1
        1:  198:                        strcpy(file_contents, read_contents(file_contents, buf));
call    0 returned 1
        -:  199:                        // printf("%s", file_contents);
        1:  200:                        file_contents[strlen(file_contents)] = '\0';
        1:  201:                        ret = send(connfd, file_contents, strlen(file_contents), 0);
call    0 returned 1
        1:  202:                        if (FAILURE == ret)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  203:                        {
    #####:  204:                            perror("\nSERVER: FAILURE IN WRITING FILE CONTENTS!!!\n");
call    0 never executed
        -:  205:                            // return FAILURE;
        -:  206:                        }
        -:  207:                    }
        -:  208:                    else
        -:  209:                    {
    #####:  210:                        send(connfd, "File Not Found", strlen("File Not Found"), 0);
call    0 never executed
        -:  211:                    }
        1:  212:                    fflush(NULL);
call    0 returned 1
        1:  213:                    bzero(buf, sizeof(buf));
        1:  214:                    bzero(file_contents, sizeof(file_contents));
        1:  215:                    bzero(choice_buf, sizeof(choice_buf));
        1:  216:                    break;
        1:  217:                case '3':
        1:  218:                    close(connfd);
call    0 returned 1
        1:  219:                    exit(SUCCESS);
call    0 returned 0
    #####:  220:                default:
    #####:  221:                    printf("Enter valid option\n");
call    0 never executed
        -:  222:                }
        -:  223:            }
        -:  224:            close(connfd);
        -:  225:        }
        -:  226:    }
        -:  227:    close(sd);
        -:  228:    return SUCCESS;
        -:  229:}
